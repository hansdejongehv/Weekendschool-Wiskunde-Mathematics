%!PS-Adobe-1.0
%%Title: deskcal.ps version 1.0 alpha.
%%Creator: Andrew Rogers (adapted from Ole Arntzen's polyeder.ps)
%%CreationDate: 6/1/93
%%Pages: 1
%%EndComments

%----------------------------------------------------------------------
% A small program to create a dodecahedral desk calendar; adapted from
% Ole Arntzen's (olea@ii.uib.no) generic polyhedron program, polyeder.ps,
% by Andrew Rogers
%
% This program is public domain.
%
%----------------------------------------------------------------------

% Updated August 2004
% - more bugfixes

% Updated May 2003
% - bugfixes

% Updated April 2002 by Willem Jan Palenstijn:
% - Translated into Dutch
% - Allow any starting month

/year 2008 def			% define desired year here
/month 11 def			% define desired starting month (1 = jan)

/pos 0 def						% starting position
/mon [1 2 7 12 8 9 10 11 3 4 5 6] def			% position -> month
/ndays [0 31 28 31 30 31 30 31 31 30 31 30 31] def	% month lengths

/name [() (Januari) (Februari) (Maart) (April) (Mei) (Juni) (Juli)
          (Augustus) (September) (Oktober) (November) (December)] def
/wkday [(Ma) (Di) (Wo) (Do) (Vr) (Za) (Zo)] def

/LineLength 96 def  			% length of the edges
/fsize LineLength 9 div def		% font size

/center {		% str width center
/width exch def
/str exch def
width str stringwidth pop sub 2 div 0 rmoveto str show
} def

/strcat {		% str1 str2 >> str1str2
2 copy
length exch length
dup 3 -1 roll add
string
dup 0 6 -1 roll putinterval
dup 3 -1 roll 4 -1 roll putinterval
} def

/printcal {
  % input: pos, month, year, start
  % uses: mon, ndays
  /m mon pos get def			% convert position to month
  /m m month add 10 add 12 mod 1 add def

  /year1 year def
  m month lt { /year1 year1 1 add def } if
  
  gsave
  /Helvetica-Bold findfont fsize scalefont setfont

  /Y LineLength 1.09 mul def
  0 Y moveto
  name m get (  ) strcat year1 4 string cvs strcat LineLength center
  /l ndays m get def 			% calculate length, starting offset
  /s start def
  /m mon pos get def
  1 1 m 1 sub {
    /i exch def
    /s s ndays i month add 2 sub 12 mod 1 add get add def
  } for
  /s s 7 mod def

  % calculate centering information for weekdays/dates

  /Helvetica-Bold findfont fsize 1 sub scalefont setfont
  /w3 (222) stringwidth pop def
  /w2 (22) stringwidth pop def
  /X LineLength w3 6 mul w2 add sub 2 div def

  /Helvetica-Bold findfont fsize 2 sub scalefont setfont
  /Y Y fsize 1.5 mul sub def
  0 1 6 {				% weekdays
    /w exch def
    X w w3 mul add Y moveto
    wkday w get w2 center
  } for

  /Helvetica-Bold findfont fsize 1 sub scalefont setfont
  /Y Y fsize sub def

  1 1 l {				% dates
    /d exch 3 string cvs def
    X s 7 mod w3 mul add w2 add d stringwidth pop sub
      Y s 7 idiv fsize mul sub moveto
    d show
    /s s 1 add def
  } for
  grestore
  /pos pos 1 add def
} def

/ReadCharacter
{
% This routine looks for an interesting character, and return it on
% the stack.  Illegal character => Quit.
  /OneCharacter 1 string def
  {
    currentfile OneCharacter readstring % Read one character.
    not { (Unexpected end of FILE.  Quit) print quit } if
    OneCharacter (e) eq OneCharacter (f) eq OneCharacter (g) eq or or { exit } if
    OneCharacter (3) ge OneCharacter (9) le and { exit } if
    pop

    OneCharacter (%) eq
    {   % Found commentcharacter, drop rest of line.
      {
        currentfile OneCharacter readstring     % Read one character.
        not { (Unexpected end of FILE.  Quit) print quit } if
        pop
        OneCharacter (\012) eq { exit } if
      } loop
    }
    {
      OneCharacter ( ) gt
      {
        % Illegal character => Quit.
        (Illegal characeter: ") print
        OneCharacter print
        ("\012.  Quit) print
        quit
      } if
    } ifelse
  } loop
} def

/DrawEdge
{
  0 0 moveto
  LineLength 0 lineto stroke
} def

/DrawFlip
{
  [1 5] 5 setdash
  0 0 moveto
  LineLength 0 lineto stroke
  [] 0 setdash
  0 0 moveto
%  LineLength 0.5 mul LineLength 0.3125 mul neg lineto
  LineLength 0.80902 mul LineLength 0.58778 mul neg lineto
  LineLength 0 lineto stroke
} def

/DrawAltFlip
{
  [1 5] 5 setdash
  0 0 moveto
  LineLength 0 lineto stroke
  [] 0 setdash
  0 0 moveto
%  LineLength 0.5 mul LineLength 0.3125 mul neg lineto
  LineLength 0.19098 mul LineLength 0.58778 mul neg lineto
  LineLength 0 lineto stroke
} def


/InnerLoop
{
  /OneCharacter ReadCharacter def   % Read one character.
  OneCharacter (e) eq { DrawEdge }
    { OneCharacter (f) eq { DrawFlip }
	{ OneCharacter (g) eq { DrawAltFlip } { DrawPolygon } ifelse } ifelse } ifelse

  LineLength 0 translate
  CurrentAngle rotate
} def

/DrawPolygon
{
  [1 4] 4 setdash
  0 0 moveto
  LineLength 0 lineto stroke
  [] 0 setdash
  CurrentAngle  % Put previous CurrentAngle on stack for later use.

  /NumEdges OneCharacter cvi def
  /CurrentAngle 360 NumEdges div def
  180 CurrentAngle add rotate

  printcal

  NumEdges 1 sub {
    InnerLoop
  } repeat

  LineLength 0 translate    % Transformer back to start.
  180 rotate

  /CurrentAngle exch def    % Fetch CurrentAngle from the stack.
} def

/DrawPolyhedron
{

  /OneCharacter ReadCharacter def   % Read one character.
  /NumEdges OneCharacter cvi def
  /CurrentAngle 360 NumEdges div def

  printcal

  NumEdges {
    InnerLoop
  } repeat

} def

1 setlinewidth      % Set line thickness.

% adjust month lengths for leap year
year 4 mod 0 eq year 100 mod 0 ne and year 400 mod 0 eq or {
  ndays 2 29 put
} if

% calculate starting day of year
% ym1 = year - 1
/ym1 year 1 sub def

% calculate weekday of 1 Jan Year = (y-1 + (y-1)/4 - (y-1)/100 + (y-1)/400)%7
/start ym1 ym1 4 idiv add ym1 100 idiv sub ym1 400 idiv add 7 mod def
% weekday of 1 Month Year
/s start def
1 1 month 1 sub {	
  /i exch def	
  /s s ndays i get add def
} for
/start s 7 mod def

% reset ndays correctly
ndays 2 28 put
/febyear year def
month 2 gt { /febyear febyear 1 add def } if
febyear 4 mod 0 eq febyear 100 mod 0 ne and febyear 400 mod 0 eq or {
  ndays 2 29 put
} if

% Draw pentagon dodecaheadron.

gsave
      % Translate to make the polyhedron fit the paper.
      % Make it 5/16" (approx. 32 points) from top edge.
306 792 18 sub LineLength 2.49 mul sub translate
DrawPolyhedron
5 5f 5fg 5
          5eeee
          5fffe
          5fefe
          5fefe
      f
   ee     % This whole block is instructions for DrawPolyhedron and DrawPolygon
  5ffee   % Comments like this are allowed.  Blanks and newlines are ignored.
  5ffee
  5fefe
  5ffee
grestore

% Print some instructions.

/centerX {		% str x y center
/cY exch def
/cX exch def
/str exch def
cX str stringwidth pop 2 div sub cY moveto str show
} def

gsave
40 600 translate
90 rotate
/Helvetica findfont 24 scalefont setfont
(Maak een dodecaeder kalender) 0 0 centerX

/Helvetica findfont 12 scalefont setfont
(Snij langs ononderbroken lijnen; Vouw langs de gestippelde.) 0 -35 centerX
(De plakstrookjes in de aangegeven volgorde plakken.) 0 -48 centerX
(Waar hetzelfde nummer staat met a, b, c: allemaal tegelijk plakken.) 0 -61 centerX
grestore


gsave
510 210 translate
90 rotate
% /ZapfChancery-MediumItalic findfont 30 scalefont setfont
% (Have a good break and) 0 0 centerX
% (Happy Holidays!) 0 -40 centerX
/Helvetica findfont 10 scalefont setfont
% grestore


showpage
